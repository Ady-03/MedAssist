import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { usePatient } from "@/context/patient-context";
import { 
  AlertCircle, 
  FileText, 
  Save, 
  Printer,
  AlertTriangle
} from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { queryClient } from "@/lib/queryClient";

interface GuidanceData {
  assessment: string;
  steps: string[];
  warnings: string[];
  savedToRecords?: boolean;
  guidanceId?: number;
}

export default function FirstAidGuidance({ guidanceData }: { guidanceData?: GuidanceData }) {
  const { currentPatient } = usePatient();
  const { toast } = useToast();
  const [isSaved, setIsSaved] = useState(guidanceData?.savedToRecords || false);
  
  const saveToRecordsMutation = useMutation({
    mutationFn: async () => {
      if (!currentPatient || !guidanceData) {
        throw new Error("Cannot save: missing patient or guidance data");
      }
      
      // Create a medical record from the guidance
      const response = await apiRequest("POST", "/api/medical-records", {
        patientId: currentPatient.id,
        title: "First Aid Guidance",
        description: guidanceData.assessment,
        type: "First Aid",
        status: "New",
        images: []
      });
      
      return response.json();
    },
    onSuccess: () => {
      setIsSaved(true);
      toast({
        title: "Saved to Records",
        description: "This first aid guidance has been saved to the patient's medical records."
      });
      
      // Invalidate medical records cache
      if (currentPatient) {
        queryClient.invalidateQueries({ 
          queryKey: [`/api/medical-records/patient/${currentPatient.id}`] 
        });
      }
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to save to records. Please try again.",
        variant: "destructive"
      });
      console.error("Save error:", error);
    }
  });
  
  const handlePrintInstructions = () => {
    if (!guidanceData) return;
    
    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      toast({
        title: "Error",
        description: "Could not open print window. Please check your popup blocker settings.",
        variant: "destructive"
      });
      return;
    }
    
    // Create the print content
    printWindow.document.write(`
      <html>
        <head>
          <title>First Aid Instructions</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; line-height: 1.6; }
            h1 { color: #2563EB; }
            h2 { color: #4B5563; margin-top: 20px; }
            ol, ul { margin-bottom: 20px; }
            .warning { background-color: #FEF3C7; border-left: 4px solid #F59E0B; padding: 10px; }
            .assessment { background-color: #DBEAFE; border-left: 4px solid #2563EB; padding: 10px; margin-bottom: 20px; }
            footer { margin-top: 30px; font-size: 12px; color: #6B7280; border-top: 1px solid #E5E7EB; padding-top: 10px; }
          </style>
        </head>
        <body>
          <h1>First Aid Instructions</h1>
          <div class="assessment">
            <h2>Assessment</h2>
            <p>${guidanceData.assessment}</p>
          </div>
          
          <h2>Recommended First Aid Steps:</h2>
          <ol>
            ${guidanceData.steps.map(step => `<li>${step}</li>`).join('')}
          </ol>
          
          <div class="warning">
            <h2>When to Seek Medical Attention</h2>
            <ul>
              ${guidanceData.warnings.map(warning => `<li>${warning}</li>`).join('')}
            </ul>
          </div>
          
          <footer>
            <p>Generated by MedAssist on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
            ${currentPatient ? `<p>Patient: ${currentPatient.name} (ID: ${currentPatient.patientId})</p>` : ''}
          </footer>
        </body>
      </html>
    `);
    
    // Trigger print
    printWindow.document.close();
    printWindow.focus();
    
    // Short delay to ensure content is loaded
    setTimeout(() => {
      printWindow.print();
      printWindow.close();
    }, 250);
  };

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle className="text-lg font-semibold text-neutral-900">First Aid Guidance</CardTitle>
      </CardHeader>
      <CardContent>
        {/* Placeholder before assessment */}
        {!guidanceData && (
          <div className="text-center py-8">
            <FileText className="h-12 w-12 mx-auto text-neutral-400" />
            <h3 className="mt-4 text-neutral-700 font-medium">Waiting for your input</h3>
            <p className="mt-2 text-sm text-neutral-500 max-w-md mx-auto">
              Upload an image, describe your symptoms, or use voice recording to receive first aid guidance.
            </p>
          </div>
        )}
        
        {/* First aid guidance after assessment */}
        {guidanceData && (
          <div>
            <div className="bg-blue-50 border-l-4 border-primary p-4 rounded mb-6">
              <div className="flex">
                <div className="flex-shrink-0">
                  <AlertCircle className="h-5 w-5 text-primary" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-primary">Assessment</h3>
                  <div className="mt-2 text-sm text-blue-700">
                    <p>{guidanceData.assessment}</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <h3 className="font-medium text-neutral-900">Recommended First Aid Steps:</h3>
              <ol className="list-decimal pl-5 space-y-3 text-neutral-700">
                {guidanceData.steps.map((step, index) => (
                  <li key={index}>{step}</li>
                ))}
              </ol>
              
              <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded mt-6">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <AlertTriangle className="h-5 w-5 text-yellow-400" />
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-yellow-800">When to Seek Medical Attention</h3>
                    <div className="mt-2 text-sm text-yellow-700">
                      <p>Seek medical attention if:</p>
                      <ul className="list-disc pl-5 mt-1 space-y-1">
                        {guidanceData.warnings.map((warning, index) => (
                          <li key={index}>{warning}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="mt-6 flex justify-between">
              <Button
                variant="outline"
                className="text-primary bg-primary/10 hover:bg-primary/20"
                onClick={() => saveToRecordsMutation.mutate()}
                disabled={saveToRecordsMutation.isPending || isSaved || !currentPatient}
              >
                <Save className="h-4 w-4 mr-2" />
                {isSaved ? "Saved to Records" : "Save to Records"}
              </Button>
              
              <Button onClick={handlePrintInstructions}>
                <Printer className="h-4 w-4 mr-2" />
                Print Instructions
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
